jobs:
  - job: TagBranchWithSemver
    displayName: Tag Branch with Semantic Version
    pool:
      vmImage: ubuntu-latest
    
    variables:
      merge_commit: $(Build.SourceVersion)
      template: version-template.yml

    steps:
      - checkout: self
        persistCredentials: true
      - script: |
          git fetch --tags --quiet
        displayName: Fetch all tags
      - script: |
          previous_version=$(git tag | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | sort --version-sort --reverse | head -n 1)
          if ["$previous_version" == ""]; then
            previous_version=0.0.0
          fi
          if [[ "$previous_version" =~ [0-9]+\.[0-9]+\.[0-9]+ ]]; then
              echo "Previous version format is valid: $previous_version"
          else
              echo "Unknown previous version format: $previous_version"
              exit 1
          fi
          echo "##vso[task.setvariable variable=previous_version]$previous_version"
          echo "Current version: $previous_version"
        displayName: Get previous version
      - script: |
          previous_version=$(echo $(previous_version))
          
          major_version=$(echo $previous_version | cut -d '.' -f1)
          minor_version=$(echo $previous_version | cut -d '.' -f2)
          patch_version=$(echo $previous_version | cut -d '.' -f3)

          echo "var major: ${{variables.major}}"
          echo "var minor: ${{variables.minor}}"  

          # get version from file and compare
          while IFS='=' read -r key value; do
          # Export variables using the key as the variable name
            echo "##vso[task.setvariable variable=${key}]${value}"
          done < version.txt
          echo "major: $(major)"
          echo "minor: $(minor)"
          
          if [[ $(major) == $(major_version) ]]; then
            major_version=$((major))
            minor_version=0
            patch_version=0
          elif [[ $(minor) == $minor_version) ]]; then
            minor_version=$((minor))
            patch_version=0
          else
            patch_version=$((patch_version + 1))
          fi

          # COMMIT_MESSAGE=$(git log -1)
          # echo "commit message: $COMMIT_MESSAGE"

          # if [[ $COMMIT_MESSAGE == *"#major"* ]]; then
          #   major_version=$((major_version + 1))
          #   minor_version=0
          #   patch_version=0
          # elif [[ $COMMIT_MESSAGE == *"#minor"* ]]; then
          #   minor_version=$((minor_version + 1))
          #   patch_version=0
          # else
          #   patch_version=$((patch_version + 1))
          # fi

          new_version="$major_version.$minor_version.$patch_version"
          echo "##vso[task.setvariable variable=new_version]$new_version"
          echo "New version: $new_version"
        displayName: Generate new version
      - script: |
          new_version=$(echo $(new_version))
          echo $new_version
          echo $(merge_commit)
          git tag -f $new_version $(merge_commit)
          git push -f origin $new_version
        displayName: Tag commit with new version
